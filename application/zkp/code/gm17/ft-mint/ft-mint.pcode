
import "LIBSNARK/sha256compression"
import "PACKING/unpack128"

def CONCAT128x216x216('field' a127...0, 'field' b215...0, 'field' c215...0)->(field560):
	return a127...0, b215...0, c215...0

def CONCAT216x216('field' a215...0, 'field' b215...0)->(field432):
	return a215...0, b215...0

def shaPad432To512('field' a431...0)->(field512):
	return a431...0, 1, 70....0, 1,1,0,1,1,0,0,0,0

def shaPad216To512('field' a215...0)->(field512):
	return a215...0, 1, 287....0, 1,1,0,1,1,0,0,0

def shaPad128To512('field' a127...0)->(field512):
	return a127...0, 1, 375....0, 1,0,0,0,0,0,0,0


//MAIN - Proving Asset Coin A is in the token Z { Z = H(S|Pk|A) }

//inputs for main are:

// - A (public) is the 128 bit coin value

// - Pk (private) is the 216 bit public key of A derived by hashing the Secret Key Sk of A. IT IS KEPT PRIVATE FOR ZK!!!

// - S (private) is the 216 bit private token random nonce

// - Z (public) is the 216 bit public identifier of the token commitment

// Note - We have truncated the 256 bit SHA hash down to 216 bits.  We do not believe this has a significant affect on security and it avoids having to include sha256 rounds in the sha circuit implementation.

//Each field element can be at most 254 bits. We cap our field elements to 128 bits (16 bytes) to match the functionality of the pack128() and unpack128() functions.
//This means that most input variables occupy two field elements, being 216 bits in length

def main(field A, 'field' £pPk1...0, 'field' £pS1...0, 'field' pZ1...0)->(field1):

	//Unpack the inputs A,S,Pk,Z. Unpacks each into a 128 bit block (for simplicity). The unpacked binary string is in big endian format, left-padded with 0's. (NOTE: THIS METHOD OF PADDING IS DIFFERENT FROM THE PADDING REQUIRED FOR SHA256 - i.e. unpack128() padding is very different from that produced by shaPad64To512())
	//unpack128 unpacks a field element to 128 field elements.
	//the coin value A is only 128 bits - no one will want more money than that.

	A127...0 = unpack128(A)

	S255...128 = unpack128(pS1)
	S127...0 = unpack128(pS0)

	Pk255...128 = unpack128(pPk1)
	Pk127...0 = unpack128(pPk0)

	Z255...128 = unpack128(pZ1)
	Z127...0 = unpack128(pZ0)

	//Concat A,Pk,S.

	d559...0 = CONCAT128x216x216(A127...0, Pk215...0, S215...0)

	//this is too big to handle in a single sha round and our sha can't handle multiple rounds
	//as a work-around, we will split d, hash both parts and then hash the result - remember to do this in Node too!

		//first 432 bits (432 is 216*2 - a convenient number in our 216 bit scheme)
	t511...0 = shaPad432To512(d431...0)
	t255...0 = sha256compression(t511...0)
		//remaining 128 bits
	u511...0 = shaPad128To512(d559...432)
	u255...0 = sha256compression(u511...0)
		//then concat the results msb first
	d431...0 = CONCAT216x216(u215...0, t215...0)
		//and hash the result
	d511...0 = shaPad432To512(d431...0)
	z255...0 = sha256compression(d511...0)  //we've been using 'd' as a temporary placeholder in the above to save on variable usage.

	//Unlike for minting an asset token, we no longer need to compute the hash of A, we just use it directly

	//This checks if the hash z we computed using A which is H(A|Pk|S) is equal to Z until the 1st 216 bits:

	z==215...0==Z

	return 1
