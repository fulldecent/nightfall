import "LIBSNARK/sha256compression"
import "PACKING/unpack128"

def CONCAT216x216x216('field' a215...0, 'field' b215...0, 'field' c215...0)->(field648):
	return a215...0, b215...0, c215...0

def CONCAT216x216('field' a215...0, 'field' b215...0)->(field432):
	return a215...0, b215...0

// output format: 192bit string, 1, zeros, last 8 bytes reserved for defining the size of the input string (binary representation of 192 in this case)
def shaPad192To512('field' a191...0)->(field512):
	return a191...0, 1, 311....0, 1, 1, 0, 0, 0, 0, 0, 0

def shaPad216To512('field' a215...0)->(field512):
	return a215...0, 1, 287....0, 1,1,0,1,1,0,0,0

def shaPad432To512('field' a431...0)->(field512):
	return a431...0, 1, 70....0, 1,1,0,1,1,0,0,0,0

//inputs for main are:
// Proving Asset Token A is in the token Z { Z = H(A|Pk|S) }
// - S is the 216 bit private token serial number
// - Pk is the 216 bit public key of A derived by hashing the Secret Key Sk of A
// - Z is the 216 bit public identifier of the token
// - A is the 256 bit private asset hash created from swarm (note: it looks like 512 bits are actually being passed as A)

// Note - We truncate the 256 bit SHA hash down to 216 bits to make the code shorter.  This will have an effect on security and
// but not for any practical purpose we believe.

//Each field element passed to main() can be at most 128bits, to make use of unpack128()

def main('field' A1...0, 'field' £pPk1...0, 'field' £pS1...0, 'field' pZ1...0)->(field1):

	//Unpack the inputs of main() to 128 bits. We'll unpack each field to its own 128 bit string for simplicity for now. Later efficiencies could be made by grouping some inputs.

	a255...128 = unpack128(A1)
	a127...0 = unpack128(A0)

	Pk255...128 = unpack128(pPk1)
	Pk127...0 = unpack128(pPk0)

	S255...128 = unpack128(pS1)
	S127...0 = unpack128(pS0)

	Z255...128 = unpack128(pZ1)
	Z127...0 = unpack128(pZ0)

	// compute z = H(A|Pk|S) (sort of). The padding needs to be added to create a true hash

	d647...0 = CONCAT216x216x216(a215...0, Pk215...0, S215...0)

	//this is too big to handle in a single sha round and our sha can't handle multiple rounds
	//as a work-around, we will split d, hash both parts and then hash the result - remember to do this in Node too!

		//first 432 bits (432 is 216*2 - a convenient number in our 216 bit scheme)
	t511...0 = shaPad432To512(d431...0)
	t255...0 = sha256compression(t511...0)
		//remaining 216 bits
	u511...0 = shaPad216To512(d647...432)
	u255...0 = sha256compression(u511...0)
		//then concat the results msb first
	d431...0 = CONCAT216x216(u215...0, t215...0)
		//and hash the result
	d511...0 = shaPad432To512(d431...0)
	z255...0 = sha256compression(d511...0)  //using 'd' as a temporary placeholder in the above to save on variable usage.

	//This checks if the hash z we computed using A1 which is H(A|Pk|S) is equal to Z until the 1st 216 bits

	z==215...0==Z

	return 1
