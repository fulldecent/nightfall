import "LIBSNARK/sha256compression"
import "PACKING/unpack128"


def CONCAT216x216x216('field' a215...0, 'field' b215...0, 'field' c215...0)->(field648):
	return a215...0, b215...0, c215...0

def CONCAT216x216('field' a215...0, 'field' b215...0)->(field432):
	return a215...0, b215...0

//this function is needed because we've used * as a pcode wildcard and ORDEREDCONCAT needs a multiply doh!
def MUL(field x, field y)->(field1):
	return x*y

//concatenate two words according to an order bit. If order=0, g is first.  If order=1, f is first
def ORDEREDCONCAT216x216(field order, 'field' f215...0, 'field' g215...0) ->(field432):
	{field r* = MUL(order,f*) + MUL(1-order, g*)
	field s* = MUL(order,g*) + MUL(1-order, f*)}215...0
	return r215...0,s215...0

def shaPad432To512('field' a431...0)->(field512):
	return a431...0, 1, 70....0, 1,1,0,1,1,0,0,0,0

def shaPad216To512('field' a215...0)->(field512):
	return a215...0, 1, 287....0, 1,1,0,1,1,0,0,0

//inputs for main are:
// A - Asset identifier which is the hash return of asset meta data from swarm
// The path to Root from node where A is present is b0....b7
// R - the Merkle root (public)
// N - Nullifier of token commitment containing A (Public)
// Pkb - Public key of Bob who will receive the transferred token
// S - Serial Number of token commitment of A belonging to sender Alice
// Sb - Serial Number of token commitment of A belonging to recipient Bob
// Sk - Secret key of Alice
// Zb - Token commitment of the recipient (Public)

//Note - we now use 216 bits for the Merkle tree calculation.  This is because 432 is the biggest input we can use for sha256
// if we want 432/2 to end on a byte boundary for easier Solidity computation
//without needing to do full rounds and we need to concatenate the two child hashes.
//We consider 216 bits to be sufficiently secure.

//Each field element passed to main() can be at most 128bits, to make use of unpack128() so most variables,being 216 bits long, occupy two fields

def main('field' £A1...0, [private field b*bh, private field b*bl]0...31, private field order, 'field' pN1...0, 'field' £pPkb1...0, 'field' £pS1...0, 'field' £pSb1...0, 'field' £pSk1...0, 'field' pR1...0, 'field' pZb1...0)->(field1):

	//Unpack the inputs of main() to 128 bits. We'll unpack each field to its own 128 bit strings for simplicity for now. Later efficiencies could be made by grouping some inputs.

	a255...128 = unpack128(A1)
	a127...0 = unpack128(A0)

	{b*b255...128 = unpack128(b*bh)}31...0
	{b*b127...0 = unpack128(b*bl)}31...0

	order127...0 = unpack128(order)
	N255...128 = unpack128(pN1)
	N127...0 = unpack128(pN0)
	Pkb255...128 = unpack128(pPkb1)
	Pkb127...0 = unpack128(pPkb0)
	S255...128 = unpack128(pS1)
	S127...0 = unpack128(pS0)
	Sb255...128 = unpack128(pSb1)
	Sb127...0 = unpack128(pSb0)
	Sk255...128 = unpack128(pSk1)
	Sk127...0 = unpack128(pSk0)
	R255...128 = unpack128(pR1)
	R127...0 = unpack128(pR0)
	Zb255...128 = unpack128(pZb1)
	Zb127...0 = unpack128(pZb0)

	//H(S|Sk) = Nullifier. The padding needs to be added to create a true hash

	t431...0 = CONCAT216x216(S215...0, Sk215...0)

	t511...0 = shaPad432To512(t431...0)

	PrA255...0 = sha256compression(t511...0)

	// Calculation of Pk from H(Sk)

	t511...0 = shaPad216To512(Sk215...0)

	Pk255...0 = sha256compression(t511...0)

	// Proof 2. H(A|Pk|S) = Z_A is in the Merkle Tree

	d647...0 = CONCAT216x216x216(a215...0, Pk215...0, S215...0)

	//this is too big to handle in a single sha round and our sha can't handle multiple rounds
	//instead, we will split d, hash both parts and then hash the result - remember to do this in Node too!

		//first 432 bits (432 is 216*2 - a convenient number in our 216 bit scheme)
	t511...0 = shaPad432To512(d431...0)
	t255...0 = sha256compression(t511...0)
		//remaining 216 bits
	u511...0 = shaPad216To512(d647...432)
	u255...0 = sha256compression(u511...0)
		//then concat the results msb first
	d431...0 = CONCAT216x216(u215...0, t215...0)
		//and hash the result
	d511...0 = shaPad432To512(d431...0)
	t255...0 = sha256compression(d511...0)  //we've been using 'd,t,u' as a temporary placeholder in the above to save on variable usage.

	//Prove that we know the path
	//concat commitment hash with its first through 31st siblings: The padding needs to be added to create a true hash.  Note, for simplicity
	//we use the 216 lsb from the SHA256.

	{t431...0 = ORDEREDCONCAT216x216(order*, t215...0, b*b215...0)

	t511...0 = shaPad432To512(t431...0)

	t255...0 = sha256compression(t511...0)}31...1

	//concat result with its 32nd sibling: r|a0. The padding needs to be added to create a true hash.  Note, for simplicity
	//we use the 216 lsb from the SHA256.

	t431...0 = ORDEREDCONCAT216x216(order0, t215...0, b0b215...0)

	t511...0 = shaPad432To512(t431...0)

	PrB255...0 = sha256compression(t511...0)

	// Proof 3. Know A|Pkb|Sb such that H(A|Pkb|Sb) = Zb

	d647...0 = CONCAT216x216x216(a215...0, Pkb215...0, Sb215...0)

	//this is too big to handle in a single sha round and our sha can't handle multiple rounds
	//as a work-around, we will split d, hash both parts and then hash the result - remember to do this in Node too!

		//first 432 bits (432 is 216*2 - a convenient number in our 216 bit scheme)
	t511...0 = shaPad432To512(d431...0)
	t255...0 = sha256compression(t511...0)
		//remaining 216 bits
	u511...0 = shaPad216To512(d647...432)
	u255...0 = sha256compression(u511...0)
		//then concat the results msb first
	d431...0 = CONCAT216x216(u215...0, t215...0)
		//and hash the result
	d511...0 = shaPad432To512(d431...0)
	PrC255...0 = sha256compression(d511...0)  //we've been using 'd,t,u' as a temporary placeholder in the above to save on variable usage.


	// H(S|Sk) == N

	PrA==215...0==N

	PrB==215...0==R

	PrC==215...0==Zb

	return 1
